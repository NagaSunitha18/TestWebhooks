Docker and Apache Tomcat 
_________________________

    extend the official Dockerfile for Tomcat
    build a new image
    launch a container from the modified image
    deploy and test a RESTful Web Service onto this container

 Apache Tomcat

A docker search shows me the most popular (and official) Docker Tomcat container:

$ sudo docker search tomcat

FROM tomcat:7-jre7
MAINTAINER "srinivas <chefatops@gmail.com>"
 sudo docker build -t srinivas/tomcat .


 Running Tomcat:
________________________________

This command will run Tomcat and expose the container's port 8080 on the host's port of 8080:

$ sudo docker run -p 8080:8080 srinivas/tomcat


If I wanted to launch additional containers from this same image, I could just change:
________________________________________________________________________________________

$ sudo docker run -p 8081:8080 srinivas/tomcat




 Extending the Dockerfile
_______________________________

I'm going to extend the Dockerfile to support a configuration that will permit automated deployments from Maven.

I need to add a settings.xml file and update the tomcat-users.xml file. A simplified form of each file is given

tomcat-users.xml:

<?xml version='1.0' encoding='utf-8'?>
<tomcat-users>
 <role rolename="manager-gui"/>
 <role rolename="manager-gui"/>
 <role rolename="manager-script"/>
 <user username="srinivas" password="srinivas" roles="manager,manager-gui,manager-script" />
</tomcat-users>

settings.xml:
________________________

<?xml version="1.0" encoding="UTF-8"?>
<settings>
 <servers> 
  <server>
   <id>TomcatServer</id>
   <username>srinivas</username>
   <password>srinivas</password>
  </server> 
 </servers>



place each of these files in the same directory as my Dockerfile.
__________________________________________________________________

The Dockerfile is updated to this:

FROM tomcat:7-jre7

MAINTAINER "srinivas<chefatops@gmail.com>"

ADD settings.xml /usr/local/tomcat/conf/
ADD tomcat-users.xml /usr/local/tomcat/conf/

 Rebuilding the Image:
_______________________________

The image is rebuilt in the same manner we initially built it:

$ sudo docker build -t srinivas/tomcat .
================================================================

$ docker exec -it name bash

where name is the name of the tomcat process you started. to get the name of your process:

$ docker ps


=================================================================================
pproach 1

Let’s get started.

Step 1) Prepare a Dockerfile
Step 2) Run build custom image base on docker hub tomcat image
Step 3) Start docker containers

 
Dockerfile

    Prepare a Dockerfile with the following content.
    Copy the war file from out from the target folder.

# Pull base image
From tomcat:8-jre8

# Maintainer
MAINTAINER "xxx <xxx@gmail.com">

# Copy to images tomcat path
ADD dockerwar.war /usr/local/tomcat/webapps/

 
Build docker image

Now run the follow command to docker image name webserver with your Dockerfile  in current directory. First time to build docker image will require download and may take longer times.

docker build -t webserver .

docker-build-1
Run docker container

Run docker container with interactive mode.

docker run -it --rm -p 8080:8080 --name dockerwar webserver

docker-build-2
Test your container

Open a browser with URL http://192.168.59.103:8080/dockerwar/

 
Approach 2

Approach 2 are slightly different, let’s modified the Dockerfile, we just extends the tomcat based image.
Dockerfile

# Pull base image
From tomcat:8-jre8

# Maintainer
MAINTAINER "xxx <xxx@gmail.com">

 
Build docker file

docker build -t webserver .

 
Eclipse classpath

In this example, I’m using eclipse classpath “target” folder to mount with docker container’s /webapps/ directory.
 
Delete all files in “target folder”

Before you start the container run “mvn clean package” to your project.
 
Run docker

Run the following command in interactive mode, mount your eclipse build path to your docker container tomcat webapps folder.
 

docker run -it --rm -p 8080:8080 -v /Users/mingch/workspace/dockerwar/target:/usr/local/tomcat/webapps/ --name dockerwar webserver

 
Test your container

Open a browser with URL http://192.168.59.103:8080/dockerwar/
 
Tails container logs

You can either start your container without interactive mode -it or run another terminal to interact with your container. Eg, my container instance is e6b2.

To list all the log files:

docker exec -it e6b2 ls /usr/local/tomcat/logs/

 

To tail the log file:

docker exec -it e6b2 tail -f /usr/local/tomcat/logs/localhost_access_log.2015-10-07.txt




